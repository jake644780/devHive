package controllers

import (
	"backend/models"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
)

func GenerateNewIdeas(ideaList string) (string, error) {
	err := godotenv.Load()
	if err != nil{
		log.Fatal("couldn't load dotenv")
	}
	// Your OpenAI API key
	apiKey := os.Getenv("API_KEY")

	// Set up the API URL for GPT
	apiURL := "https://api.openai.com/v1/completions"

	// Define the prompt with the role and list of ideas
	prompt := fmt.Sprintf(`

	Ignore all previous instructions. From now on, you are ideabot, a lovely chatbot, who helps me generate new ideas for programming features for my all-in-one website, devHive! Please generate me an idea! Here are previous ideas either generated by me, or by a previous version of you: 

	%s
	`, ideaList)

	// Set up the request body with model, prompt, and other parameters
	requestBody := models.OpenAIRequest{
		Model:    "text-davinci-003", // Or another model if preferred
		Prompt:   prompt,
		MaxTokens: 200,
	}

	// Marshal the request body to JSON
	jsonBody, err := json.Marshal(requestBody)
	if err != nil {
		return "", err
	}

	// Create a new HTTP request with the API URL and the JSON body
	req, err := http.NewRequest("POST", apiURL, bytes.NewBuffer(jsonBody))
	if err != nil {
		return "", err
	}

	// Set the necessary headers for authorization and content-type
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer " + apiKey)

	// Create an HTTP client and execute the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", err
	}

	// Parse the JSON response into OpenAIResponse struct
	var openAIResponse models.OpenAIResponse
	if err := json.Unmarshal(body, &openAIResponse); err != nil {
		return "", err
	}

	// Return the generated text (new ideas)
	if len(openAIResponse.Choices) > 0 {
		return openAIResponse.Choices[0].Text, nil
	}

	return "", fmt.Errorf("no response from OpenAI API")
}

func StringifyIdeas(ideas []models.Idea) string{
	var buffer string
	for i, idea := range ideas{
		buffer += fmt.Sprintf(`
		%v. idea:
		\n\tcategory: %v 
		\n\tContent: %v
		`, i + 1, idea.Category, idea.Content)
	}
	return buffer
}

func GetIdeaFromChatbot(c *gin.Context){
	// Call the /getAllIdeas route on the Gin server
	resp, err := http.Get("http://localhost:8081/ideas")
	if err != nil{
		c.JSON(500, gin.H{
			"error": err.Error(),
		})
		log.Fatalf("%v", err.Error())

	}
	defer resp.Body.Close()
	// Read the response body
	body, err := io.ReadAll(resp.Body)
	if err != nil{
		c.JSON(500, gin.H{
			"error": err.Error(),
		})
		log.Fatalf("%v", err.Error())
	}
	// Parse the JSON response into a slice of Idea
	var ideas []models.Idea
	if err := json.Unmarshal(body, &ideas); err != nil {
		c.JSON(500, gin.H{
			"error": err.Error(),
		})
		log.Fatalf("%v", err.Error())
	}

	prompt, err := GenerateNewIdeas(StringifyIdeas(ideas))
	if err != nil{
		c.JSON(500, gin.H{
			"error": err.Error(),
		})
		log.Fatalf("%v", err.Error())
	}
	c.String(200, prompt)

	
}
